ScalarConverter::argType ScalarConverter::_argType = UNKNOWN;

ScalarConverter::ScalarConverter(){}

ScalarConverter::ScalarConverter(const ScalarConverter &other)
{
	this->_argType = other._argType;
}

ScalarConverter::~ScalarConverter(){}

ScalarConverter &ScalarConverter::operator=(const ScalarConverter &other)
{
	if (this != &other)
		this->_argType = other.getArgType();
	return (*this);
}

void	ScalarConverter::setArgType(argType type)
{
	_argType = type;
}

ScalarConverter::argType	ScalarConverter::getArgType()
{
	return (_argType);
}

bool	check_input(std::string &input)
{
	bool hasF = false;
	bool hasDot = false;
	bool hasSign = false;
	if(input == "nan" || input == "nanf" || input == "+inf" || input == "+inff" || input == "-inf" || input == "-inff")
		return (true);
	for(size_t i = 0; i < input.size(); i++)
	{
		if(i != 0 && (input[i] != 'f' && input[i] != '.' && input[i] != '+' && input[i] != '-' && !isdigit(input[i])))
			return (false);
		if(input[i] == '.')
		{
			if(hasDot)
				return (false);
			else
				hasDot = true;
		}
		if(input[i] == 'f')
		{
			if(hasF)
				return (false);
			else
				hasF = true;
		}
		if(input[i] == '+' || input[i] == '-')
		{
			if(hasSign)
				return (false);
			else
				hasSign = true;
		}
	}
	if(hasF && !hasDot)
		return (false);
	return (true);
}

void parsing(std::string const &input)
{
    if(input.size() == 1)
    {
        if(std::isdigit(input[0]))
            ScalarConverter::setArgType(ScalarConverter::INT);
        else
            ScalarConverter::setArgType(ScalarConverter::CHAR);
    }
    else if(input == "+inf" || input == "+inff" || input == "-inf" || input == "-inff" || input == "nan" || input == "nanf")
    {
        std::cout << "char: impossible" << std::endl;
        std::cout << "int: impossible" << std::endl;
        std::cout << "float: " << input << std::endl;
        std::cout << "double: " << input << std::endl;
        return ;
    }
    else if(input.find(".") != std::string::npos)
    {
        if(input.find("f") != std::string::npos)
            ScalarConverter::setArgType(ScalarConverter::FLOAT);
        else
            ScalarConverter::setArgType(ScalarConverter::DOUBLE);
    }
    else
        ScalarConverter::setArgType(ScalarConverter::INT);
}

void	ScalarConverter::convert(std::string &input)
{
	switch(ScalarConverter::getArgType())
	{
		case(ScalarConverter::CHAR):
			ScalarConverter::CharConverter(input);
			break;
		case(ScalarConverter::INT):
			ScalarConverter::IntConverter(input);
			break;
		case(ScalarConverter::FLOAT):
			ScalarConverter::FloatConverter(input);
			break;
		case(ScalarConverter::DOUBLE):
			ScalarConverter::DoubleConverter(input);
			break;
		default:
			std::cout << "Error: Unknown type" << std::endl;
			break;
	}
}

void	ScalarConverter::IntConverter(std::string const &input)
{
	std::stringstream ss(input);
	int i;
	ss >> i;
	ss.str();

	if(ss.fail())
	{
		std::cerr << "Invalid input" << std::endl;
		return ;
	}
	if (i < 0 || i > 127)
		std::cout << "char: Non ASCII" << std::endl;
	else if (i < 32 || i > 126)
		std::cout << "char: Non displayable" << std::endl;
	else
		std::cout << "char: '" << static_cast<char>(i) << "'" << std::endl;
	std::cout << "int: " << i << std::endl;
	std::cout << "float: " << static_cast<float>(i) << ".0f" << std::endl;
	std::cout << "double: " << static_cast<double>(i) << ".0" << std::endl;
}


void	ScalarConverter::FloatConverter(std::string &input)
{
	input.erase(input.size() - 1);
	std::stringstream ss(input);
	float f;
	ss >> f;

	if(ss.fail())
	{
		std::cerr << "Invalid input" << std::endl;
		return ;
	}
	int checkInput = static_cast<int>(f);
	if (checkInput < 0 || checkInput > 127)
		std::cout << "char: Non ASCII" << std::endl;
	else if (checkInput < 32 || checkInput > 126)
		std::cout << "char: Non displayable" << std::endl;
	else
		std::cout << "char: '" << static_cast<char>(checkInput) << "'" << std::endl;
	std::cout << "int: " << checkInput << std::endl;
	if((checkInput - f) == 0)
		std::cout << "float: " << f << ".0f" << std::endl;
	else
		std::cout << "float: " << f << "f" << std::endl;
	if((checkInput - f) == 0)
		std::cout << "double: " << static_cast<double>(f) << ".0" << std::endl;
	else
		std::cout << "double: " << static_cast<double>(f) << std::endl;
}


void	ScalarConverter::DoubleConverter(std::string const &input)
{
	std::stringstream ss(input);
	double d;
	ss >> d;

	if(ss.fail())
	{
		std::cerr << "Invalid input" << std::endl;
		return ;
	}
	int checkInput = static_cast<int>(d);
	if (checkInput < 0 || checkInput > 127)
		std::cout << "char: Non ASCII" << std::endl;
	else if (checkInput < 32 || checkInput > 126)
		std::cout << "char: Non displayable" << std::endl;
	else
		std::cout << "char: '" << static_cast<char>(checkInput) << "'" << std::endl;
	std::cout << "int: " << checkInput << std::endl;
	if((checkInput - d) == 0)
		std::cout << "float: " << static_cast<float>(d) << ".0f" << std::endl;
	else
		std::cout << "float: " << static_cast<float>(d) << "f" << std::endl;
	if((checkInput - d) == 0)
		std::cout << "double: " << d << ".0" << std::endl;
	else
		std::cout << "double: " << d << std::endl;
}

void	ScalarConverter::CharConverter(std::string const &input)
{
	char	c;
	c = input[0];

	int checkInput = c;
	if (checkInput < 0 || checkInput > 127)
		std::cout << "char: Non ASCII" << std::endl;
	else if (c < 32 || c > 126)
		std::cout << "char: Non displayable" << std::endl;
	else
		std::cout << "char: '" << c << "'" << std::endl;
	std::cout << "int: " << static_cast<int>(c) << std::endl;
	std::cout << "float: " << static_cast<float>(c) << "f" << std::endl;
	std::cout << "double: " << static_cast<double>(c) << std::endl;
}
